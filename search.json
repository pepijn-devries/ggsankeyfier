[{"path":[]},{"path":"https://pepijn-devries.github.io/ggsankeyfier/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement pepijn.devries@outlook.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/data_management.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Sankey data management","text":"ggsankeyfier package needs data data.frame order plot . data.frame necessarily format data processing . cases data probably organised wide format stages Sankey diagram columns data.frame. plotting needs converted long format. , discussed .","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/data_management.html","id":"wide-or-long-format","dir":"Articles","previous_headings":"","what":"Wide or long format?","title":"Sankey data management","text":"wide format typically used working data. can best understood framework wish visualise represents collection cause-effect chains. cases stage represent link chain. wide format stage (link cause-effect chain) represented column data.frame. Also, wide format, row represent unique cause-effect chain. wide format therefore suitable describing chains. need long format? Sankey diagram, want visualise information flows stages. Moreover, might even want distinguish start end flow. , rather entire ‘chain’, data format revolves around flow ends. requires long format row contains information flow end. Now, work either wide long format? working information chains, makes sense work wide format. plotting ggsankeyfier modification flow information required, long format suitable.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/data_management.html","id":"converting-from-wide-to-long","dir":"Articles","previous_headings":"Wide or long format?","what":"Converting from wide to long","title":"Sankey data management","text":"package comes function allow pivot information stages organised columns (.e., wide format) long format. need specify columns represent stages, numeric column quantifies size flow specific aspects wish include aesthetics plot. illustrated data Piet et al. (submitted), data set describes risks provide ecosystem services via cause-effect chains (note package contains simplified, highly aggregated, version data). services affected activities exert pressures onto ecosystem components supply services. Risk expressed numeric indicator (RCSES). Stages formed columns named \"activity_type\", \"pressure_cat\", \"biotic_group\" \"service_division\". pivoted wide format long format required plotting follows:","code":"## first get a data set with a wide format: data(ecosystem_services)  ## pivot to long format for plotting: es_long <-   pivot_stages_longer(     ## the data.frame we wish to pivot:     data        = ecosystem_services,     ## the columns that represent the stages:     stages_from = c(\"activity_type\", \"pressure_cat\",                     \"biotic_realm\", \"service_division\"),     ## the column that represents the size of the flows:     values_from = \"RCSES\"   )"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/data_management.html","id":"the-edge-id-and-connector","dir":"Articles","previous_headings":"","what":"The edge id and connector","title":"Sankey data management","text":"pivoting long format illustrated note two additional columns contain information available wide format. Namely columns edge_id connector. columns added ggsankeyfier functions need plotting data Sankey diagram. specifically, columns required distinguish head tail flow. allows apply different aesthetics ends flow (yet fully implemented) visualise feedback loops (see vignette(\"loopdeloop\")), otherwise possible. column connector contain either \"\" (start flow) \"\" (end flow). edge_id contains unique identifier edge (flow), determines \"\" connected \"\" connector. applying pivot_stages_longer function, \"\" end \"\" connector edge identical value.","code":"names(es_long) #> [1] \"RCSES\"     \"edge_id\"   \"connector\" \"node\"      \"stage\""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/decorating.html","id":"decorating-nodes-and-edges-with-aesthetics","dir":"Articles","previous_headings":"","what":"Decorating nodes and edges with aesthetics","title":"Decorating Sankey diagrams","text":"waist aesthetic can modify shape edge curve, presented detail Curve shape section. shown Nodes edges can decorated colour (border nodes edges), fill (inside nodes edges), alpha aesthetics.  Note nodes edges can decorated separately. Also note variable assigned one aesthetics get guide legend. section Keys legends.","code":"library(ggsankeyfier) library(ggplot2) theme_set(theme_light()) data(\"ecosystem_services\")  ## Let's subset the example data to create a less cluttered ## Sankey diagram es_sub <-   ecosystem_services |>   subset(RCSES > 0.005) |>   pivot_stages_longer(c(\"activity_realm\", \"biotic_realm\", \"service_section\"),                       \"RCSES\", \"service_section\")  ggplot(   data    = es_sub,   mapping = aes(x = stage, y = RCSES, group = node,     edge_id = edge_id, connector = connector, colour = stage)) +   ## apply fill and alpha aesthetic only to edges (not the nodes)   geom_sankeyedge(aes(alpha = RCSES, fill = service_section)) +   geom_sankeynode() +   guides(fill   = guide_legend(ncol = 1),          alpha  = guide_legend(ncol = 1),          colour = guide_legend(ncol = 1)) +   theme(legend.position = \"top\")"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/decorating.html","id":"additional-layers","dir":"Articles","previous_headings":"","what":"Additional layers","title":"Decorating Sankey diagrams","text":"want add additional layers plot (text labels), important layers apply statistics positioning geom_sankeyedge geom_node layers. illustrate first need base plot onto layers can added: want add additional layers want let line nodes edges, need : use consistent call position_sankey() layers; add stat_sankeyedge() want line layer edges sankey diagram. shown example ggplot2::geom_segment() layer added plot.  want align layer nodes diagram, need add stat_sankeynode() layer. ggplot2::geom_bar() layer added plot, appears normal geom_sankeynode() layer. similar mostly just differ positioning stats applied.","code":"pos <- position_sankey(v_space = \"auto\", order = \"ascending\", align = \"justify\")  p <-   ggplot(   data    = es_sub,   mapping = aes(x = stage, y = RCSES, group = node,     edge_id = edge_id, connector = connector)) p +   geom_sankeynode(position = pos) +   geom_segment(aes(col = service_section),                position = pos, stat = \"sankeyedge\",                arrow = arrow(length = unit(0.2, \"cm\"))) p +   geom_sankeyedge(aes(fill = service_section), position = pos) +   geom_bar(position = pos, stat = \"sankeynode\")"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/decorating.html","id":"curve-shape","dir":"Articles","previous_headings":"","what":"Curve shape","title":"Decorating Sankey diagrams","text":"curves connect nodes ggsankeyfier drawn symmetrical widened Bézier curves. slope curve can controlled slope parameter. curve becomes steep slope = 1:  even go beyond slope 1, curve start zigzag. values less 1 result gentler slopes. can also play much curve widened. default width curve constant along Bézier curve follows. setting waist aesthetic, width curve blown , shrunk center. also scale_waist_* functions (like scale_waist_continuous()), allow adjust appearance waist legend keys.","code":"p +   geom_sankeyedge(slope = 1, position = pos, mapping = aes(fill = service_section)) +   geom_sankeynode(position = pos) p +   geom_sankeyedge(aes(waist = RCSES, fill = service_section), position = pos) +   geom_sankeynode(position = pos)"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/decorating.html","id":"keys-and-legends","dir":"Articles","previous_headings":"","what":"Keys and legends","title":"Decorating Sankey diagrams","text":"nodes edges draw_key() function, meaning drawn automatically ggplot2::guide_legend(). multiple aesthetics based variable, combined single legend (possible). order make work, use guide (\"legend\" case example ) scales.","code":"p +   geom_sankeyedge(aes(waist = RCSES, fill = RCSES), position = pos) +   geom_sankeynode(position = pos) +   scale_waist_binned(guide = \"legend\") +   scale_fill_binned(guide = \"legend\")"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/decorating.html","id":"different-themes","dir":"Articles","previous_headings":"","what":"Different themes","title":"Decorating Sankey diagrams","text":"top vignette set ggplot2::theme_light() default theme. also possible add themes directly plot:  change colour scheme coloured aesthetics, need add appropriate colour scale. Let’s add turbo colours diagram:","code":"p +   geom_sankeyedge(aes(fill = RCSES), position = pos) +   geom_sankeynode(position = pos) +   theme_void() p +   geom_sankeyedge(aes(fill = RCSES), position = pos) +   geom_sankeynode(position = pos) +   scale_fill_viridis_c(option = \"turbo\")"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/loopdeloop.html","id":"to-cycle-or-not-to-cycle","dir":"Articles","previous_headings":"","what":"To cycle or not to cycle","title":"Loop De Loop","text":"ggsankeyfier package requires specify node, node edge flows. See vignette(\"data_management\") technical details works. Consequently, allows let edges flow node stage. cases, Sankey alluvial diagrams essentially stage-structured directed acyclic graphs. However, way ggsankeyfier organises data allows create stage-structured directed graphs. words, can create feedback loops diagram. demonstrated present vignette. examples first need prepare basic plot:","code":"library(ggsankeyfier) library(ggplot2) theme_set(theme_light()) set.seed(0)  pos <- position_sankey(v_space = \"auto\")  ## Let's subset the data, to make the plot less cluttered: es_subset <- pivot_stages_longer(   subset(ecosystem_services, RCSES > 0.02),   c(\"activity_realm\", \"biotic_realm\", \"service_section\"),   \"RCSES\")  # And prepare a basis for the plot p <-   ggplot(es_subset, aes(x = stage, y = RCSES, group = node,                         connector = connector, edge_id = edge_id)) +   geom_sankeynode(position = pos) +   geom_sankeyedge(position = pos)"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/loopdeloop.html","id":"feedback","dir":"Articles","previous_headings":"","what":"Feedback","title":"Loop De Loop","text":"order demonstrate feedback loop rbind fictional edge demonstration data. Note feedback loop make sense context data. serves proof principle. %+% operator update plot data includes feedback loop.","code":"es_subset_feedback <-   es_subset |>   rbind(     data.frame(       RCSES     = 0.05,       edge_id   = max(es_subset$edge_id) + 1,       connector = c(\"from\", \"to\"),       node      = c(\"Cultural\", \"Fish & Cephalopods\"),       stage     = c(\"service_section\", \"biotic_realm\")     )   )  p %+% es_subset_feedback"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/loopdeloop.html","id":"self-reference","dir":"Articles","previous_headings":"","what":"Self reference","title":"Loop De Loop","text":"Edges don’t even flow one stage another regardless direction. Instead, also possible let edge flow stage. fact, can even let edge flow node. illustrated example , rbind fictional self-referencing node. , context data, self-reference make sense, serves proof principle.","code":"es_subset_selfref <-   es_subset |>   rbind(     data.frame(       RCSES     = 0.05,       edge_id   = max(es_subset$edge_id) + 1,       connector = c(\"from\", \"to\"),       node      = c(\"Cultural\", \"Cultural\"),       stage     = c(\"service_section\", \"service_section\")     )   )  p %+% es_subset_selfref"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/positioning.html","id":"using-position_sankey","dir":"Articles","previous_headings":"","what":"Using position_sankey","title":"Positioning Sankey elements","text":"Positioning elements Sankey / alluvial diagram controlled position_sankey() function. can used set spacing nodes (see Spacing); Apply vertical alignment (see Alignment); Introduce split within stage (see Splitting nodes); Alter stacking order (see Stacking order); Nudge positions (see Nudging). order illustrate positioning options, ?ecosystem_services data used comes packaged ggsankeyfier. Please check vignette(\"data_management\") wish understand data pre-processed.","code":"library(ggplot2) library(ggsankeyfier) theme_set(theme_light()) data(\"ecosystem_services\")"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/positioning.html","id":"spacing","dir":"Articles","previous_headings":"","what":"Spacing","title":"Positioning Sankey elements","text":"three important parameters setting spacing Sankey diagram: width: specifies combined width node specific stage. nodes split , half width width / 2. h_space: horizontal space (specified native units) split nodes (measured center half). v_space: minimal vertical space nodes measured native units. Depending alignment nodes spacing might stretched. illustrated following example:","code":"pos <- position_sankey(split_nodes = TRUE, align = \"top\",                        width = 0.2, v_space = 0.15, h_space = 0.25) serv_plot <-   ggplot(ecosystem_services_pivot1,          aes(x = stage, y = RCSES, group = node, connector = connector,              edge_id = edge_id)) +   geom_sankeyedge(position = pos) +   geom_sankeynode(position = pos)"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/positioning.html","id":"alignment","dir":"Articles","previous_headings":"","what":"Alignment","title":"Positioning Sankey elements","text":"Vertical alignment can controlled align argument. Alignment explained plot shown . , two red horizontal dashed guide lines used snap different alignment options.  align = 'justified', nodes stage spread (varying vertical space) line top bottom guide lines. minimum space nodes controlled v_space. align = 'top' 'bottom', nodes aligned top bottom guide line respectively, v_space constant. align = 'center', nodes centered around middle top bottom guide lines, v_space constant. working split_nodes = TRUE, alignment tedious job.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/positioning.html","id":"splitting-nodes","dir":"Articles","previous_headings":"","what":"Splitting nodes","title":"Positioning Sankey elements","text":"split_nodes = TRUE, vertical split introduced node stage. split can useful wish emphasise transitions stages. can also used show imbalance edges flowing nodes equal. imbalance shown example , selecting subset edges. Note split introduced automatically edges flowing node equal.","code":"es_sub <- ecosystem_services_pivot2 |> subset(RCSES > quantile(RCSES, 0.9)) ggplot(es_sub,        aes(x = stage, y = RCSES, group = node, connector = connector, edge_id = edge_id)) +   geom_sankeyedge(aes(fill = service_section)) +   geom_sankeynode()"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/positioning.html","id":"stacking-order","dir":"Articles","previous_headings":"","what":"Stacking order","title":"Positioning Sankey elements","text":"Another aspect might want control Sankey diagram stacking order nodes edges. order = \"as_is\", nodes stacked order levels (order appearance), edges arranged order edge_id (order appearance). options order = \"ascending\" order = \"descending\", based y aesthetic. order demonstrate stacking order reduce number records example data (.e., select higher risk chains data). produce less cluttered Sankey diagram. plot nodes edges ascending stacking order (largest top):  plot nodes edges desacending stacking order (largest bottom):","code":"es_sub <-   ecosystem_services |>   subset(RCSES > quantile(RCSES, 0.99)) |>   pivot_stages_longer(c(\"activity_realm\", \"biotic_realm\", \"service_section\"),                       \"RCSES\", \"service_section\")  p <- ggplot(es_sub,        aes(x = stage, y = RCSES, group = node, connector = connector,            edge_id = edge_id)) pos <- position_sankey(v_space = \"auto\", order = \"ascending\") p + geom_sankeyedge(aes(fill = service_section), position = pos) +   geom_sankeynode(position = pos) pos <- position_sankey(v_space = \"auto\", order = \"descending\") p + geom_sankeyedge(aes(fill = service_section), position = pos) +   geom_sankeynode(position = pos)"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/articles/positioning.html","id":"nudging","dir":"Articles","previous_headings":"","what":"Nudging","title":"Positioning Sankey elements","text":"function position_sankey() can also used position text labels. Let’s use add labels nodes. Note using simple ggplot2::geom_text() layer, provide \"sankeynode\" stat function pos object positioning labels.  Let’s say want place text labels next nodes. case need nudge calculated desired position. also need adjust justification text labels expand x scales.","code":"pos <- position_sankey(v_space = \"auto\", order = \"descending\") p + geom_sankeyedge(aes(fill = service_section), position = pos) +   geom_sankeynode(position = pos) +   geom_text(aes(label = node), stat = \"sankeynode\", position = pos, cex = 2) pos_text <- position_sankey(v_space = \"auto\", order = \"descending\", nudge_x = 0.1) p + geom_sankeyedge(aes(fill = service_section), position = pos) +   geom_sankeynode(position = pos) +   geom_text(aes(label = node), stat = \"sankeynode\", position = pos_text, hjust = 0, cex = 2) +   scale_x_discrete(expand = expansion(add = c(0.2, .6)))"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pepijn de Vries. Author, maintainer, data contributor. Gerjan Piet. Data contributor. Ruud Jongbloed. Data contributor. Anne Grundlehner. Data contributor. Jacqueline Tamis. Data contributor.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Vries P (2025). ggsankeyfier: Create Sankey Alluvial Diagrams Using 'ggplot2'. R package version 0.1.8.0006, https://pepijn-devries.github.io/ggsankeyfier/.","code":"@Manual{,   title = {ggsankeyfier: Create Sankey and Alluvial Diagrams Using 'ggplot2'},   author = {Pepijn {de Vries}},   year = {2025},   note = {R package version 0.1.8.0006},   url = {https://pepijn-devries.github.io/ggsankeyfier/}, }"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Create Sankey and Alluvial Diagrams Using ggplot2","text":"ggsankeyfier packages allows visualise data Sankey Alluvial diagrams. Sankey diagram essentially stacked bar plot, bands connect bars across stages (x-axis), show quantities flow .","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/index.html","id":"why-use-ggsankeyfier","dir":"","previous_headings":"","what":"Why use ggsankeyfier?","title":"Create Sankey and Alluvial Diagrams Using ggplot2","text":"ggsankeyfier allows add Sankey diagram layers ggplot2::ggplot(). package also provides stat_* position_* functions allow add sorts layers, text labels. Furthermore, data model used package allows visualise flows skip stages even feedback loops.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Sankey and Alluvial Diagrams Using ggplot2","text":"Get CRAN version Get development version github","code":"install.packages(\"ggsankeyfier\") devtools::install_github('pepijn-devries/ggsankeyfier')"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/index.html","id":"important-concepts","dir":"","previous_headings":"","what":"Important concepts","title":"Create Sankey and Alluvial Diagrams Using ggplot2","text":"variation definition terminology used Sankey diagrams, introduced consistency across package documentation. try adhere common definitions used graph theory. theory used model pairwise relationships ‘nodes’ connected ‘edges’. aspects circled illustration . Important aspects ggsankeyfier package can visualise structured graphs. Meaning node belongs specific stage (arranged along x-axis).","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/index.html","id":"sankey-thesaurus","dir":"","previous_headings":"Important concepts","what":"Sankey thesaurus","title":"Create Sankey and Alluvial Diagrams Using ggplot2","text":"standards Sankey diagrams, may different words representing similar aspects. Therefore following thesaurus presented provide overview hopefully avoid confusion. list starts term preferred present package, followed alternatives. Alluvial diagram. Although arguably Sankey diagram, similar. Differences ly type data (population facts across categorical dimensions (alluvial) versus quantities different states (Sankey)) Also, alluvial diagrams always structured stages (order matter), whereas Sankey diagrams necessarily structured, order matter Bump diagram. actually special case alluvial diagrams, node flows single next node. Usually, stacking order nodes stage determined size nodes Vertices. Another commonly used term graph theory Stratum. term coined alluvial diagrams Flow. Sometimes also refers interaction stages. present package used synonym ‘edge’. Alluvium. term used alluvial diagrams Line. Another commonly used albeit generic term graph theory Link. Although commonly used graph theory, avoid use context may get confused link cause-effect chain, better reflected stages Lode. term used alluvial diagrams Link. used present package avoid confusion edges (see )","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Create Sankey and Alluvial Diagrams Using ggplot2","text":"Like ggplot, start calling ggplot2::ggplot2(), provide data plotting specify aesthetics (aes). Layers Sankey edges nodes simply added plot using +-operator:  consistency aesthetics used ggplot2::ggplot() layers, stage variable assigned x, quantity nodes edges y node identifier group. addition ‘standard’ aesthetics, also need specify connector specifying direction edge (one '' ''); edge_id used determine connector ends paired together.","code":"data(\"ecosystem_services\")  ggplot(ecosystem_services_pivot1,        aes(x = stage, y = RCSES, group = node,            connector = connector, edge_id = edge_id)) +   geom_sankeyedge(v_space = \"auto\") +   geom_sankeynode(v_space = \"auto\")"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/index.html","id":"data-management","dir":"","previous_headings":"Usage","what":"Data management","title":"Create Sankey and Alluvial Diagrams Using ggplot2","text":"Note plotting routines require data organised data.frame, row ‘connector’. connector either start end edge. allows provide different characteristics ends. However, cases type data working . Check vignette(\"data_management\"), rearrange data displaying Sankey diagram.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/index.html","id":"positioning-nodes-and-edges","dir":"","previous_headings":"Usage","what":"Positioning nodes and edges","title":"Create Sankey and Alluvial Diagrams Using ggplot2","text":"package gives much control positioning elements diagram. Think : spacing sizing nodes edges aligning nodes vertically introducing horizontal split nodes stacking order nodes edges vignette(\"positioning\") show .","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/index.html","id":"decorating-nodes-and-edges","dir":"","previous_headings":"Usage","what":"Decorating nodes and edges","title":"Create Sankey and Alluvial Diagrams Using ggplot2","text":"creating Sankey diagrams may want alter appearance. may want : assign meaningful decorations (colours) using aesthetics nodes edges add keys legends guide audience add additional layers (text) change edge curve shape use different themes Check vignette(\"decorating\") discover done.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Create Sankey and Alluvial Diagrams Using ggplot2","text":"Please note ggsankeyfier project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Create Sankey and Alluvial Diagrams Using ggplot2","text":"package development part EU GES4SEAS project (EU call HORIZON-CL6-2021-BIODIV-01-04, grant agreement 101059877) WUR Knowledge Base Research program KB-36-003-022 “use ecosystem services conserve biodiversity North Sea” supported finance Dutch Ministry Agriculture, Nature Food Quality","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Create Sankey and Alluvial Diagrams Using ggplot2","text":"Piet GJ, Jongbloed RH, Bentley JW, Grundlehner , Tamis JE, De Vries P (prep.) Cumulative Impact Assessment North Sea Capacity Supply Ecosystem Services DOI:10.2139/ssrn.4760674","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/draw_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Key glyphs for legends — draw_key_sankeyedge","title":"Key glyphs for legends — draw_key_sankeyedge","text":"geom associated function draws key geom needs displayed legend. functions called draw_key_*(), * stands name respective key glyph. key glyphs can customized individual geoms providing geom key_glyph argument (see layer() examples .)","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/draw_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Key glyphs for legends — draw_key_sankeyedge","text":"","code":"draw_key_sankeyedge(data, params, size)  draw_key_sankeynode(data, params, size)"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/draw_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Key glyphs for legends — draw_key_sankeyedge","text":"data single row data frame containing scaled aesthetics display key params list additional parameters supplied geom. size Width height key mm.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/draw_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Key glyphs for legends — draw_key_sankeyedge","text":"grid grob.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/draw_key.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Key glyphs for legends — draw_key_sankeyedge","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/draw_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Key glyphs for legends — draw_key_sankeyedge","text":"","code":"## The key glyph for sankey diagrams can be applied to different geoms as well. ## In the example below it is applied to a histogram  library(ggplot2) ggplot(data.frame(x = rnorm(100), groups = rep(letters[1:2], 2)),        aes(x = x, fill = groups)) +   geom_histogram(key_glyph = draw_key_sankeyedge, binwidth = 0.2, alpha = 1)  ggplot(data.frame(x = rnorm(100), groups = rep(letters[1:2], 2)),        aes(x = x, fill = groups)) +   geom_histogram(key_glyph = draw_key_sankeynode, binwidth = 0.2)"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/ecosystem_services.html","id":null,"dir":"Reference","previous_headings":"","what":"Data on risks to supply ecosystem services — ecosystem_services","title":"Data on risks to supply ecosystem services — ecosystem_services","text":"Data indicating risk resulting anthropological activities marine ecosystem capacity supply services. data set serves (aggregated Piet et al. (submitted)) example illustrate package's features.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/ecosystem_services.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data on risks to supply ecosystem services — ecosystem_services","text":"ecosystem_services  data.frame 3421 rows 8 columns. columns : activity_type: Type activities pose risk activity_realm: Aggregation activity types pressure_cat: Category pressures exerted activities eventually pose risk ecosystem. biotic_group: Biotic groups affected pressures. biotic_realm: Aggregation biotic groups service_division: Division ecosystem services provided biotic groups affected activities. service_section: Aggregation service divisions. RCSES: 'Risk Capacity Supply Ecosystem Services'. numerical score reflecting amount risk ecosystem supply specific services. details see Piet et al. (submitted) data.frame wide oriented format, typical common applications. row data.frame represents unique pathway activity_tpe poses risk ecosystem sevice_division, via pressure_cat biotic_group. column either contains information specific stage overall quantifier (case RCSES). present form suitable directly plot Sankey diagram. purpose needs pivoted pivot_stages_longer(). Two different variants prepared function: ecosystem_services_pivot1 ecosystem_services_pivot2. latter pivot contains service_section extra feature can used additional decoration Sankey diagram. therefore detailed first alternative. ecosystem_services_pivot1  data.frame 112 rows 5 columns. Columns : RCSES: See ecosystem_services. edge_id: Unique numerical identifier edge Sankey diagram. connector: One '' '', indicating whether looking start end edge. node: collection activity_realm, pressure_cat, biotic_realm service_section values ecosystem_services data.frame. stage: Stages Sankey diagram formed columns activity_realm, pressure_cat, biotic_realm service_section ecosystem_services data.frame. ecosystem_services_pivot1 created ecosystem_services using pivot_stages_longer() can used directly Sankey diagram (using geom_sankeynode() geom_sankeyedge()) ecosystem_services_pivot2  data.frame 252 rows 6. ecosystem_services_pivot1 exception distinct extra column service_division allows detailed aesthetics Sankey diagram.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/ecosystem_services.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data on risks to supply ecosystem services — ecosystem_services","text":"Piet GJ, Bentley J, Jongbloed RH, Grundlehner , Tamis JE, De Vries P (submitted) Cumulative Impact Assessment North Sea Capacity Supply Ecosystem Services. doi:10.2139/ssrn.4450241","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/ecosystem_services.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Data on risks to supply ecosystem services — ecosystem_services","text":"Pepijn de Vries, Gerjan Piet, Jacob Bentley, Ruud Jongbloed, Anne Grundlehner, Jacqueline Tamis","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/ecosystem_services.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data on risks to supply ecosystem services — ecosystem_services","text":"","code":"data(\"ecosystem_services\") library(ggplot2)  if (requireNamespace(\"stringr\")) {   library(stringr)    pos <- position_sankey(v_space = \"auto\", align = \"justify\")   pos_text <- position_sankey(v_space = \"auto\", align = \"justify\", nudge_x = 0.1)    ## A simplified version of the Sankey diagram as published by Piet _et al._ (submitted)   ggplot(ecosystem_services |>            pivot_stages_longer(              c(\"activity_type\", \"pressure_cat\", \"biotic_group\", \"service_section\"),              \"RCSES\"),          aes(x = stage, y = RCSES, group = node, connector = connector, edge_id = edge_id)) +     geom_sankeyedge(aes(fill = RCSES), position = pos) +     geom_sankeynode(position = pos) +     geom_text(aes(label = str_wrap(node, 20)), position = pos_text, stat = \"sankeynode\",               hjust = 0, cex = 2) +     scale_fill_viridis_c(option = \"turbo\", trans = \"sqrt\") +     theme_minimal() } #> Loading required namespace: stringr"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeyedge.html","id":null,"dir":"Reference","previous_headings":"","what":"Sankey edges (flows) — GeomSankeysegment","title":"Sankey edges (flows) — GeomSankeysegment","text":"geom_sankeysegment() draws straight line two connected nodes, geom_sankeyedge() draws ribbon nodes following Bezier curved path. combine edges geom_sankeynode(), make sure use position object.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeyedge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sankey edges (flows) — GeomSankeysegment","text":"","code":"GeomSankeysegment  geom_sankeysegment(   mapping = NULL,   data = NULL,   stat = \"sankeyedge\",   position = \"sankey\",   na.rm = FALSE,   show.legend = NA,   order = c(\"ascending\", \"descending\", \"as_is\"),   width = \"auto\",   align = c(\"bottom\", \"top\", \"center\", \"justify\"),   h_space = \"auto\",   v_space = 0,   nudge_x = 0,   nudge_y = 0,   split_nodes = FALSE,   split_tol = 0.001,   direction = c(\"forward\", \"backward\"),   inherit.aes = TRUE,   ... )  GeomSankeyedge  geom_sankeyedge(   mapping = NULL,   data = NULL,   stat = \"sankeyedge\",   position = \"sankey\",   na.rm = FALSE,   show.legend = NA,   slope = 0.5,   ncp = 100,   width = \"auto\",   align = c(\"bottom\", \"top\", \"center\", \"justify\"),   order = c(\"ascending\", \"descending\", \"as_is\"),   h_space = \"auto\",   v_space = 0,   nudge_x = 0,   nudge_y = 0,   split_nodes = FALSE,   split_tol = 0.001,   direction = c(\"forward\", \"backward\"),   inherit.aes = TRUE,   ... )"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeyedge.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sankey edges (flows) — GeomSankeysegment","text":"object class GeomSankeysegment (inherits GeomSegment, Geom, ggproto, gg) length 4. object class GeomSankeyedge (inherits GeomSankeysegment, GeomSegment, Geom, ggproto, gg) length 7.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeyedge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sankey edges (flows) — GeomSankeysegment","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. order character indicating method used order stacking nodes edges plot. one : ascending (default), sorts nodes edges large small (largest top); descending sorts nodes edges small large (smallest top); as_is leave order nodes edges data. width Width node (numeric). split_nodes set TRUE part split node half width. Use \"auto\" automatically determine suitable width. align character indicates nodes across stages aligned. can \"top\", \"bottom\", \"center\" \"justify\". h_space Horizontal space split nodes (numeric). argument ignored split_nodes == FALSE. Use \"auto\" automatically position split nodes. v_space Vertical space nodes (numeric). set zero (0), Sankey diagram becomes alluvial plot. Use \"auto\" automatically determine suitable vertical space. nudge_x, nudge_y Horizontal vertical adjustment nudge items . Can useful offsetting labels. split_nodes logical value indicating whether source destination nodes depicted separate boxes. split_tol relative node size (resulting source destination edges) differs fraction, node displayed two separate bars. direction One \"forward\" (default) \"backward\". set \"backward\" direction edges inverted. cases parameter affect plot. can helpful want decorate end edge (instead start; see examples). inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. slope Slope parameter (numeric) Bezier curves used depict edges. value 0 1 work nicely. non-zero values also work. ncp Number control points Bezier curve forms edge. Larger numbers result smoother curves, cost computational time. Default 100.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeyedge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sankey edges (flows) — GeomSankeysegment","text":"Returns ggplot2::layer() can added ggplot2::ggplot()","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeyedge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sankey edges (flows) — GeomSankeysegment","text":"ggplot2 layer connects paired nodes via Bezier curve. width curve determined y aesthetic. attempted keep width curve constant along curved path, targeted graphics device. aspect ratio graphics device altered plot generated, aspect ratio maybe . case render plot .","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeyedge.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Sankey edges (flows) — GeomSankeysegment","text":"geom_sankeysegment() geom_sankeyedge() understand following aesthetics (required aesthetics bold)  x: Works variables discrete scale. Might work continuous variables guaranteed. variable used distinguish stages Sankey diagram x axis. y: continuous variable representing width edges Sankey diagram. group: discrete variable used grouping edges nodes stage. Essentially identifier nodes. connector: Indicates side edge reflected corresponding record. one \"\" \"\". edge_id: unique identifier value edge. identifier used link specific \"\" \"\" records edge (flow). fill: see vignette(\"ggplot2-specs\", \"ggplot2\") colour: see vignette(\"ggplot2-specs\", \"ggplot2\") linetype: see vignette(\"ggplot2-specs\", \"ggplot2\") linewidth: see vignette(\"ggplot2-specs\", \"ggplot2\") alpha: variable control opacity element. waist: variable control width edge two nodes. Small values create hour glass shape, whereas large values produce apple shape.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeyedge.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sankey edges (flows) — GeomSankeysegment","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeyedge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sankey edges (flows) — GeomSankeysegment","text":"","code":"library(ggplot2) data(\"ecosystem_services\")  ggplot(ecosystem_services_pivot1, aes(x = stage, y = RCSES, group = node,                     connector = connector, edge_id = edge_id,                     fill = node)) +   geom_sankeynode(v_space = \"auto\") +   geom_sankeyedge(v_space = \"auto\")"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeynode.html","id":null,"dir":"Reference","previous_headings":"","what":"Bars representing nodes in a Sankey diagram — GeomSankeynode","title":"Bars representing nodes in a Sankey diagram — GeomSankeynode","text":"Sankey diagram nodes depicted stacked bars, possibly vertical spacing . Use geom_sankeynode() add nodes Sankey diagram. combine nodes geom_sankeyedge(), make sure use position object.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeynode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bars representing nodes in a Sankey diagram — GeomSankeynode","text":"","code":"GeomSankeynode  geom_sankeynode(   mapping = NULL,   data = NULL,   stat = \"sankeynode\",   position = \"sankey\",   na.rm = FALSE,   show.legend = NA,   width = \"auto\",   align = c(\"bottom\", \"top\", \"center\", \"justify\"),   order = c(\"ascending\", \"descending\", \"as_is\"),   h_space = \"auto\",   v_space = 0,   nudge_x = 0,   nudge_y = 0,   split_nodes = FALSE,   split_tol = 0.001,   direction = c(\"forward\", \"backward\"),   inherit.aes = TRUE,   ... )"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeynode.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bars representing nodes in a Sankey diagram — GeomSankeynode","text":"object class GeomSankeynode (inherits GeomBar, GeomRect, Geom, ggproto, gg) length 6.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeynode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bars representing nodes in a Sankey diagram — GeomSankeynode","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. width Width node (numeric). split_nodes set TRUE part split node half width. Use \"auto\" automatically determine suitable width. align character indicates nodes across stages aligned. can \"top\", \"bottom\", \"center\" \"justify\". order character indicating method used order stacking nodes edges plot. one : ascending (default), sorts nodes edges large small (largest top); descending sorts nodes edges small large (smallest top); as_is leave order nodes edges data. h_space Horizontal space split nodes (numeric). argument ignored split_nodes == FALSE. Use \"auto\" automatically position split nodes. v_space Vertical space nodes (numeric). set zero (0), Sankey diagram becomes alluvial plot. Use \"auto\" automatically determine suitable vertical space. nudge_x, nudge_y Horizontal vertical adjustment nudge items . Can useful offsetting labels. split_nodes logical value indicating whether source destination nodes depicted separate boxes. split_tol relative node size (resulting source destination edges) differs fraction, node displayed two separate bars. direction One \"forward\" (default) \"backward\". set \"backward\" direction edges inverted. cases parameter affect plot. can helpful want decorate end edge (instead start; see examples). inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeynode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bars representing nodes in a Sankey diagram — GeomSankeynode","text":"Returns ggplot2::layer() can added ggplot2::ggplot()","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeynode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bars representing nodes in a Sankey diagram — GeomSankeynode","text":"ggplot2 layer depicts size connected edges bar. height bar determined sum y aesthetic group. sum edges flow bar differ split_tol compared edges flow node, vertical split introduced node.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeynode.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Bars representing nodes in a Sankey diagram — GeomSankeynode","text":"geom_sankeynode() understands following aesthetics (required aesthetics bold)  x: Works variables discrete scale. Might work continuous variables guaranteed. variable used distinguish stages Sankey diagram x axis. y: continuous variable representing width edges Sankey diagram. group: discrete variable used grouping edges nodes stage. Essentially identifier nodes. connector: Indicates side edge reflected corresponding record. one \"\" \"\". edge_id: unique identifier value edge. identifier used link specific \"\" \"\" records edge (flow). fill: see vignette(\"ggplot2-specs\", \"ggplot2\") colour: see vignette(\"ggplot2-specs\", \"ggplot2\") linetype: see vignette(\"ggplot2-specs\", \"ggplot2\") linewidth: see vignette(\"ggplot2-specs\", \"ggplot2\") alpha: variable control opacity element.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeynode.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bars representing nodes in a Sankey diagram — GeomSankeynode","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/geom_sankeynode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bars representing nodes in a Sankey diagram — GeomSankeynode","text":"","code":"library(ggplot2) data(\"ecosystem_services\")  ggplot(ecosystem_services_pivot1, aes(x = stage, y = RCSES, group = node,                     connector = connector, edge_id = edge_id,                     fill = node)) +   geom_sankeynode(v_space = \"auto\") +   geom_sankeyedge(v_space = \"auto\")"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/ggsankeyfier-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggsankeyfier: Create Sankey and Alluvial Diagrams Using 'ggplot2' — ggsankeyfier-package","title":"ggsankeyfier: Create Sankey and Alluvial Diagrams Using 'ggplot2' — ggsankeyfier-package","text":"Sankey alluvial diagrams visualise flows quantities across stages stacked bars. package makes easy create diagrams using 'ggplot2'.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/ggsankeyfier-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggsankeyfier: Create Sankey and Alluvial Diagrams Using 'ggplot2' — ggsankeyfier-package","text":"Maintainer: Pepijn de Vries pepijn.devries@outlook.com (ORCID) [data contributor] contributors: Gerjan Piet (ORCID) [data contributor] Ruud Jongbloed (ORCID) [data contributor] Anne Grundlehner (ORCID) [data contributor] Jacqueline Tamis (ORCID) [data contributor]","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/pivot_stages_longer.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot wide data to long for plotting as Sankey — pivot_stages_longer","title":"Pivot wide data to long for plotting as Sankey — pivot_stages_longer","text":"Pivot data wide long format suitable plotting Sankey diagrams.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/pivot_stages_longer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot wide data to long for plotting as Sankey — pivot_stages_longer","text":"","code":"pivot_stages_longer(   data,   stages_from,   values_from,   additional_aes_from,   invert_nodes = FALSE )"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/pivot_stages_longer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot wide data to long for plotting as Sankey — pivot_stages_longer","text":"data data.frame (object inheriting data.frame class), needs pivoted. stages_from vector column names, represent stages. values_from vector column names, contains numeric values represent size edges Sankey diagrams. multiple values single edge, summed. additional_aes_from vector column names data want use decorate elements Sankey diagram. argument optional. See also vignette(\"data_management\") vignette(\"decorating\"). invert_nodes pivoting information stages_from, data converted factor. Set invert_nodes TRUE want invert order levels factor.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/pivot_stages_longer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot wide data to long for plotting as Sankey — pivot_stages_longer","text":"Returns dplyr::tibble selected columns data pivoted. stages listed column named stage nodes column named node. result contain two new columns: column named connector indicating whether row tibble reflects source edge (value '') destination edge (value ''); column named edge_id, containing unique identifier edge. edge_id required plotting routine order identify edge source connected edge destination.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/pivot_stages_longer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pivot wide data to long for plotting as Sankey — pivot_stages_longer","text":"Typically, data displayed Sankey, collected stored wide format, stage (.e., x-axis Sankey diagram) column. ggplot2 philosophy requires data long format, diagram decorations (aesthetics) can mapped specific columns. function pivots wide data appropriate long format, indicating columns contain stages, order appear Sankey. details see vignette(\"data_management\")","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/pivot_stages_longer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pivot wide data to long for plotting as Sankey — pivot_stages_longer","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/pivot_stages_longer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot wide data to long for plotting as Sankey — pivot_stages_longer","text":"","code":"data(\"ecosystem_services\")  ecosystem_services_p1 <-   pivot_stages_longer(     data        = ecosystem_services,     stages_from = c(\"activity_type\", \"pressure_cat\",                     \"biotic_group\", \"service_division\"),     values_from = \"RCSES\")  ## suppose we want to decorate our Sankey ## with information on the 'section' of the services: ecosystem_services_p2 <-   pivot_stages_longer(     data        = ecosystem_services,     stages_from = c(\"activity_type\", \"pressure_cat\",                     \"biotic_group\", \"service_division\"),     values_from = \"RCSES\",     additional_aes_from = \"service_section\")"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/position_sankey.html","id":null,"dir":"Reference","previous_headings":"","what":"Position nodes and edges in a Sankey diagram — PositionSankey","title":"Position nodes and edges in a Sankey diagram — PositionSankey","text":"Calculates x y positions elements (nodes edges) Sankey diagram.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/position_sankey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Position nodes and edges in a Sankey diagram — PositionSankey","text":"","code":"PositionSankey  position_sankey(   width = \"auto\",   align = c(\"bottom\", \"top\", \"center\", \"justify\"),   order = c(\"ascending\", \"descending\", \"as_is\"),   h_space = \"auto\",   v_space = 0,   nudge_x = 0,   nudge_y = 0,   split_nodes = FALSE,   split_tol = 0.001,   direction = c(\"forward\", \"backward\"),   ... )"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/position_sankey.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Position nodes and edges in a Sankey diagram — PositionSankey","text":"object class PositionSankey (inherits Position, ggproto, gg) length 13.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/position_sankey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Position nodes and edges in a Sankey diagram — PositionSankey","text":"width Width node (numeric). split_nodes set TRUE part split node half width. Use \"auto\" automatically determine suitable width. align character indicates nodes across stages aligned. can \"top\", \"bottom\", \"center\" \"justify\". order character indicating method used order stacking nodes edges plot. one : ascending (default), sorts nodes edges large small (largest top); descending sorts nodes edges small large (smallest top); as_is leave order nodes edges data. h_space Horizontal space split nodes (numeric). argument ignored split_nodes == FALSE. Use \"auto\" automatically position split nodes. v_space Vertical space nodes (numeric). set zero (0), Sankey diagram becomes alluvial plot. Use \"auto\" automatically determine suitable vertical space. nudge_x, nudge_y Horizontal vertical adjustment nudge items . Can useful offsetting labels. split_nodes logical value indicating whether source destination nodes depicted separate boxes. split_tol relative node size (resulting source destination edges) differs fraction, node displayed two separate bars. direction One \"forward\" (default) \"backward\". set \"backward\" direction edges inverted. cases parameter affect plot. can helpful want decorate end edge (instead start; see examples). ... Arguments passed ggplot2::ggproto().","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/position_sankey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Position nodes and edges in a Sankey diagram — PositionSankey","text":"Returns ggplot2::Position class object.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/position_sankey.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Position nodes and edges in a Sankey diagram — PositionSankey","text":"Based stat_* function applied parent's (stat_sankeynode(), stat_sankeyedge) object either node edge positions calculated respectively. positions can used add additional layers (e.g., text labels) plot.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/position_sankey.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Position nodes and edges in a Sankey diagram — PositionSankey","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/position_sankey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Position nodes and edges in a Sankey diagram — PositionSankey","text":"","code":"library(ggplot2) data(\"ecosystem_services\")  pos  <- position_sankey(v_space = \"auto\", order = \"ascending\") pos2 <- position_sankey(v_space = \"auto\", order = \"ascending\", direction = \"backward\")  ## Let's subset the data, to make the plot less cluttered: es_subset <- pivot_stages_longer(   subset(ecosystem_services, RCSES > 0.01),   c(\"activity_realm\", \"biotic_realm\", \"service_section\"),   \"RCSES\",   \"service_section\" )   plot <-   ggplot(es_subset, aes(x = stage, y = RCSES, group = node,                                     connector = connector, edge_id = edge_id,                                     fill = node)) +   geom_sankeynode(position = pos) +   geom_sankeyedge(position = pos, aes(fill = service_section))  # position labels at nodes plot + geom_text(aes(label = node), stat = \"sankeynode\", position = pos)  # position labels at the start of edges plot + geom_text(aes(label = sprintf(\"%0.2f\", RCSES)), stat = \"sankeyedge\", position = pos)  # position labels at the end of edges plot + geom_text(aes(label = sprintf(\"%0.2f\", RCSES)), stat = \"sankeyedge\", position = pos2)"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/scale_waist.html","id":null,"dir":"Reference","previous_headings":"","what":"Sankey edge waist line scales — scale_waist_continuous","title":"Sankey edge waist line scales — scale_waist_continuous","text":"waist scale can used control waist (.e., width edge centre) edges Sankey diagrams, order put emphasis specific edges.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/scale_waist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sankey edge waist line scales — scale_waist_continuous","text":"","code":"scale_waist_continuous(..., range = c(0, 1))  scale_waist_datetime(..., range = c(0, 1))  scale_waist_binned(..., range = c(0, 1))  scale_waist_discrete(..., range = c(0, 1))  scale_waist_manual(..., values = NULL, breaks = ggplot2::waiver())  scale_waist_identity(..., guide = \"none\")"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/scale_waist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sankey edge waist line scales — scale_waist_continuous","text":"... arguments passed onto underpinning scale constructors. range vector two numeric values used scale waist . >= 0. values set aesthetic values map data values . values matched order (usually alphabetical) limits scale, breaks provided. named vector, values matched based names instead. Data values match given na.value. breaks One : NULL breaks waiver() default breaks (scale limits) character vector breaks function takes limits input returns breaks output guide Guide use scale. Defaults \"none\".","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/scale_waist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sankey edge waist line scales — scale_waist_continuous","text":"Returns ggplot2::Scale object can added ggplot2::ggplot control waist Sankey diagram edges.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/scale_waist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sankey edge waist line scales — scale_waist_continuous","text":"scale can used scale centre Sankey edge. one end scale edge shaped like hour glass, end shaped apple.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/scale_waist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sankey edge waist line scales — scale_waist_continuous","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/scale_waist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sankey edge waist line scales — scale_waist_continuous","text":"","code":"if (requireNamespace(\"ggplot2\")) {   library(ggplot2)   data(\"ecosystem_services\")    p <-     ggplot(ecosystem_services_pivot1, aes(x = stage, y = RCSES, group = node,                                           connector = connector,                                           edge_id = edge_id,                                           waist = RCSES)) +    geom_sankeyedge(v_space = \"auto\", ncp = 10) +     geom_sankeynode(v_space = \"auto\")    p + scale_waist_binned(range = c(0.1, 2))   p + scale_waist_binned(range = c(2, 0.1)) }"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/stat_sankey.html","id":null,"dir":"Reference","previous_headings":"","what":"Sankey stats — StatSankeyedge","title":"Sankey stats — StatSankeyedge","text":"Aggregates value y axis per group nodes, used aesthetics edges.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/stat_sankey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sankey stats — StatSankeyedge","text":"","code":"StatSankeyedge  stat_sankeyedge(   mapping = NULL,   data = NULL,   geom = \"sankeyedge\",   position = \"sankey\",   na.rm = FALSE,   slope = 0.5,   ncp = 100,   show.legend = NA,   inherit.aes = TRUE,   ... )  StatSankeynode  stat_sankeynode(   mapping = NULL,   data = NULL,   geom = \"sankeynode\",   position = \"sankey\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/stat_sankey.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sankey stats — StatSankeyedge","text":"object class StatSankeyedge (inherits Stat, ggproto, gg) length 4. object class StatSankeynode (inherits Stat, ggproto, gg) length 3.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/stat_sankey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sankey stats — StatSankeyedge","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom string naming ggplot2::proto Geom subclass. either \"sankeynode\" \"sankeedge\". position character string function specifying positioning routine. default \"sankey\". na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. slope Slope parameter (numeric) Bezier curves used depict edges. value 0 1 work nicely. non-zero values also work. ncp Number control points Bezier curve forms edge. Larger numbers result smoother curves, cost computational time. Default 100. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... Passed ggplot2::layer() function","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/stat_sankey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sankey stats — StatSankeyedge","text":"Returns ggplot2 stat layer can used ggplot.","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/stat_sankey.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sankey stats — StatSankeyedge","text":"Wrangles data can passed position_sankey().","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/stat_sankey.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sankey stats — StatSankeyedge","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/reference/stat_sankey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sankey stats — StatSankeyedge","text":"","code":"library(ggplot2) data(\"ecosystem_services\")  p <- ggplot(ecosystem_services_pivot1, aes(x = stage, y = RCSES, group = node,                                            connector = connector, edge_id = edge_id,                                            fill = node)) p + stat_sankeynode()  p + stat_sankeyedge()"},{"path":"https://pepijn-devries.github.io/ggsankeyfier/news/index.html","id":"ggsankeyfier-v0180006","dir":"Changelog","previous_headings":"","what":"ggsankeyfier v0.1.8.0006","title":"ggsankeyfier v0.1.8.0006","text":"Added check workflow Added code coverage workflow badge Improved test coverage","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/news/index.html","id":"ggsankeyfier-v018","dir":"Changelog","previous_headings":"","what":"ggsankeyfier v0.1.8","title":"ggsankeyfier v0.1.8","text":"CRAN release: 2024-04-08 Update README manual","code":""},{"path":"https://pepijn-devries.github.io/ggsankeyfier/news/index.html","id":"ggsankeyfier-v017","dir":"Changelog","previous_headings":"","what":"ggsankeyfier v0.1.7","title":"ggsankeyfier v0.1.7","text":"CRAN release: 2024-03-01 Initial release Features position plot Sankey nodes edges","code":""}]
